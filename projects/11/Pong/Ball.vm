function Ball.new 0
push constant 15
call Memory.alloc 1
pop pointer 0
// let x = Ax 
push argument 0
pop this 0
// let y = Ay 
push argument 1
pop this 1
// let leftWall = AleftWall 
push argument 2
pop this 10
// let rightWall = ArightWall - 6 
push argument 3
push constant 6
sub
pop this 11
// let topWall = AtopWall 
push argument 4
pop this 12
// let bottomWall = AbottomWall - 6 
push argument 5
push constant 6
sub
pop this 13
// let wall = 0 
push constant 0
pop this 14
// do show ( ) 
push pointer 0
call Ball.show 1
pop temp 0
// return this 
push pointer 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
// do Memory . deAlloc ( this ) 
push pointer 0
call Memory.deAlloc 1
pop temp 0
// return 
push constant 0
return
function Ball.show 0
push argument 0
pop pointer 0
// do Screen . setColor ( true ) 
push constant 0
not
call Screen.setColor 1
pop temp 0
// do draw ( ) 
push pointer 0
call Ball.draw 1
pop temp 0
// return 
push constant 0
return
function Ball.hide 0
push argument 0
pop pointer 0
// do Screen . setColor ( false ) 
push constant 0
call Screen.setColor 1
pop temp 0
// do draw ( ) 
push pointer 0
call Ball.draw 1
pop temp 0
// return 
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
// do Screen . drawRectangle ( x , y , x + 5 , y + 5 ) 
push this 0
push this 1
push this 0
push constant 5
add
push this 1
push constant 5
add
call Screen.drawRectangle 4
pop temp 0
// return 
push constant 0
return
function Ball.getLeft 0
push argument 0
pop pointer 0
// return x 
push this 0
return
function Ball.getRight 0
push argument 0
pop pointer 0
// return x + 5 
push this 0
push constant 5
add
return
function Ball.setDestination 3
push argument 0
pop pointer 0
// let lengthx = destx - x 
push argument 1
push this 0
sub
pop this 2
// let lengthy = desty - y 
push argument 2
push this 1
sub
pop this 3
// let dx = Math . abs ( lengthx ) 
push this 2
call Math.abs 1
pop local 0
// let dy = Math . abs ( lengthy ) 
push this 3
call Math.abs 1
pop local 1
// let invert = ( dx < dy ) 
push local 0
push local 1
lt
pop this 7
// if ( invert ) 
push this 7
if-goto TRUE_IF.7
goto ELSE_IF.7
label TRUE_IF.7
// let temp = dx 
push local 0
pop local 2
// let dx = dy 
push local 1
pop local 0
// let dy = temp 
push local 2
pop local 1
// let positivex = ( y < desty ) 
push this 1
push argument 2
lt
pop this 8
// let positivey = ( x < destx ) 
push this 0
push argument 1
lt
pop this 9
goto END_IF.7
label ELSE_IF.7
// else 
// let positivex = ( x < destx ) 
push this 0
push argument 1
lt
pop this 8
// let positivey = ( y < desty ) 
push this 1
push argument 2
lt
pop this 9
label END_IF.7
// let d = ( 2 * dy ) - dx 
push constant 2
push local 1
call Math.multiply 2
push local 0
sub
pop this 4
// let straightD = 2 * dy 
push constant 2
push local 1
call Math.multiply 2
pop this 5
// let diagonalD = 2 * ( dy - dx ) 
push constant 2
push local 1
push local 0
sub
call Math.multiply 2
pop this 6
// return 
push constant 0
return
function Ball.move 0
push argument 0
pop pointer 0
// do hide ( ) 
push pointer 0
call Ball.hide 1
pop temp 0
// if ( d < 0 ) 
push this 4
push constant 0
lt
if-goto TRUE_IF.9
goto ELSE_IF.9
label TRUE_IF.9
// let d = d + straightD 
push this 4
push this 5
add
pop this 4
goto END_IF.9
label ELSE_IF.9
// else 
// let d = d + diagonalD 
push this 4
push this 6
add
pop this 4
// if ( positivey ) 
push this 9
if-goto TRUE_IF.10
goto ELSE_IF.10
label TRUE_IF.10
// if ( invert ) 
push this 7
if-goto TRUE_IF.11
goto ELSE_IF.11
label TRUE_IF.11
// let x = x + 4 
push this 0
push constant 4
add
pop this 0
goto END_IF.11
label ELSE_IF.11
// else 
// let y = y + 4 
push this 1
push constant 4
add
pop this 1
label END_IF.11
goto END_IF.10
label ELSE_IF.10
// else 
// if ( invert ) 
push this 7
if-goto TRUE_IF.12
goto ELSE_IF.12
label TRUE_IF.12
// let x = x - 4 
push this 0
push constant 4
sub
pop this 0
goto END_IF.12
label ELSE_IF.12
// else 
// let y = y - 4 
push this 1
push constant 4
sub
pop this 1
label END_IF.12
label END_IF.10
label END_IF.9
// if ( positivex ) 
push this 8
if-goto TRUE_IF.13
goto ELSE_IF.13
label TRUE_IF.13
// if ( invert ) 
push this 7
if-goto TRUE_IF.14
goto ELSE_IF.14
label TRUE_IF.14
// let y = y + 4 
push this 1
push constant 4
add
pop this 1
goto END_IF.14
label ELSE_IF.14
// else 
// let x = x + 4 
push this 0
push constant 4
add
pop this 0
label END_IF.14
goto END_IF.13
label ELSE_IF.13
// else 
// if ( invert ) 
push this 7
if-goto TRUE_IF.15
goto ELSE_IF.15
label TRUE_IF.15
// let y = y - 4 
push this 1
push constant 4
sub
pop this 1
goto END_IF.15
label ELSE_IF.15
// else 
// let x = x - 4 
push this 0
push constant 4
sub
pop this 0
label END_IF.15
label END_IF.13
// if ( ~ ( x > leftWall ) ) 
push this 0
push this 10
gt
not
if-goto TRUE_IF.16
goto ELSE_IF.16
label TRUE_IF.16
// let wall = 1 
push constant 1
pop this 14
// let x = leftWall 
push this 10
pop this 0
goto END_IF.16
label ELSE_IF.16
label END_IF.16
// if ( ~ ( x < rightWall ) ) 
push this 0
push this 11
lt
not
if-goto TRUE_IF.17
goto ELSE_IF.17
label TRUE_IF.17
// let wall = 2 
push constant 2
pop this 14
// let x = rightWall 
push this 11
pop this 0
goto END_IF.17
label ELSE_IF.17
label END_IF.17
// if ( ~ ( y > topWall ) ) 
push this 1
push this 12
gt
not
if-goto TRUE_IF.18
goto ELSE_IF.18
label TRUE_IF.18
// let wall = 3 
push constant 3
pop this 14
// let y = topWall 
push this 12
pop this 1
goto END_IF.18
label ELSE_IF.18
label END_IF.18
// if ( ~ ( y < bottomWall ) ) 
push this 1
push this 13
lt
not
if-goto TRUE_IF.19
goto ELSE_IF.19
label TRUE_IF.19
// let wall = 4 
push constant 4
pop this 14
// let y = bottomWall 
push this 13
pop this 1
goto END_IF.19
label ELSE_IF.19
label END_IF.19
// do show ( ) 
push pointer 0
call Ball.show 1
pop temp 0
// return wall 
push this 14
return
function Ball.bounce 5
push argument 0
pop pointer 0
// let divLengthx = lengthx / 10 
push this 2
push constant 10
call Math.divide 2
pop local 2
// let divLengthy = lengthy / 10 
push this 3
push constant 10
call Math.divide 2
pop local 3
// if ( bouncingDirection = 0 ) 
push argument 1
push constant 0
eq
if-goto TRUE_IF.21
goto ELSE_IF.21
label TRUE_IF.21
// let factor = 10 
push constant 10
pop local 4
goto END_IF.21
label ELSE_IF.21
// else 
// if ( ( ( ~ ( lengthx < 0 ) ) & ( bouncingDirection = 1 ) ) | ( ( lengthx < 0 ) & ( bouncingDirection = ( - 1 ) ) ) ) 
push this 2
push constant 0
lt
not
push argument 1
push constant 1
eq
and
push this 2
push constant 0
lt
push argument 1
push constant 1
neg
eq
and
or
if-goto TRUE_IF.22
goto ELSE_IF.22
label TRUE_IF.22
// let factor = 20 
push constant 20
pop local 4
goto END_IF.22
label ELSE_IF.22
// else 
// let factor = 5 
push constant 5
pop local 4
label END_IF.22
label END_IF.21
// if ( wall = 1 ) 
push this 14
push constant 1
eq
if-goto TRUE_IF.23
goto ELSE_IF.23
label TRUE_IF.23
// let newx = 506 
push constant 506
pop local 0
// let newy = ( divLengthy * ( - 50 ) ) / divLengthx 
push local 3
push constant 50
neg
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1
// let newy = y + ( newy * factor ) 
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
goto END_IF.23
label ELSE_IF.23
// else 
// if ( wall = 2 ) 
push this 14
push constant 2
eq
if-goto TRUE_IF.24
goto ELSE_IF.24
label TRUE_IF.24
// let newx = 0 
push constant 0
pop local 0
// let newy = ( divLengthy * 50 ) / divLengthx 
push local 3
push constant 50
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1
// let newy = y + ( newy * factor ) 
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
goto END_IF.24
label ELSE_IF.24
// else 
// if ( wall = 3 ) 
push this 14
push constant 3
eq
if-goto TRUE_IF.25
goto ELSE_IF.25
label TRUE_IF.25
// let newy = 250 
push constant 250
pop local 1
// let newx = ( divLengthx * ( - 25 ) ) / divLengthy 
push local 2
push constant 25
neg
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0
// let newx = x + ( newx * factor ) 
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
goto END_IF.25
label ELSE_IF.25
// else 
// let newy = 0 
push constant 0
pop local 1
// let newx = ( divLengthx * 25 ) / divLengthy 
push local 2
push constant 25
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0
// let newx = x + ( newx * factor ) 
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
label END_IF.25
label END_IF.24
label END_IF.23
// do setDestination ( newx , newy ) 
push pointer 0
push local 0
push local 1
call Ball.setDestination 3
pop temp 0
// return 
push constant 0
return
