function SquareGame.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
// let square = Square . new ( 0 , 0 , 30 ) 
push constant 0
push constant 0
push constant 30
call Square.new 3
pop this 0
// let direction = 0 
push constant 0
pop this 1
// return this 
push pointer 0
return
function SquareGame.dispose 0
push argument 0
pop pointer 0
// do square . dispose ( ) 
push this 0
call Square.dispose 1
pop temp 0
// do Memory . deAlloc ( this ) 
push pointer 0
call Memory.deAlloc 1
pop temp 0
// return 
push constant 0
return
function SquareGame.moveSquare 0
push argument 0
pop pointer 0
// if ( direction = 1 ) 
push this 1
push constant 1
eq
if-goto TRUE_IF.2
goto ELSE_IF.2
label TRUE_IF.2
// do square . moveUp ( ) 
push this 0
call Square.moveUp 1
pop temp 0
goto END_IF.2
label ELSE_IF.2
label END_IF.2
// if ( direction = 2 ) 
push this 1
push constant 2
eq
if-goto TRUE_IF.3
goto ELSE_IF.3
label TRUE_IF.3
// do square . moveDown ( ) 
push this 0
call Square.moveDown 1
pop temp 0
goto END_IF.3
label ELSE_IF.3
label END_IF.3
// if ( direction = 3 ) 
push this 1
push constant 3
eq
if-goto TRUE_IF.4
goto ELSE_IF.4
label TRUE_IF.4
// do square . moveLeft ( ) 
push this 0
call Square.moveLeft 1
pop temp 0
goto END_IF.4
label ELSE_IF.4
label END_IF.4
// if ( direction = 4 ) 
push this 1
push constant 4
eq
if-goto TRUE_IF.5
goto ELSE_IF.5
label TRUE_IF.5
// do square . moveRight ( ) 
push this 0
call Square.moveRight 1
pop temp 0
goto END_IF.5
label ELSE_IF.5
label END_IF.5
// do Sys . wait ( 5 ) 
push constant 5
call Sys.wait 1
pop temp 0
// return 
push constant 0
return
function SquareGame.run 2
push argument 0
pop pointer 0
// let exit = false 
push constant 0
pop local 1
// while ( ~ exit ) 
label WHILE.7
push local 1
not
not
if-goto END_WHILE.7
// while ( key = 0 ) 
label WHILE.8
push local 0
push constant 0
eq
not
if-goto END_WHILE.8
// let key = Keyboard . keyPressed ( ) 
call Keyboard.keyPressed 0
pop local 0
// do moveSquare ( ) 
push pointer 0
call SquareGame.moveSquare 1
pop temp 0
goto WHILE.8
label END_WHILE.8
// if ( key = 81 ) 
push local 0
push constant 81
eq
if-goto TRUE_IF.9
goto ELSE_IF.9
label TRUE_IF.9
// let exit = true 
push constant 0
not
pop local 1
goto END_IF.9
label ELSE_IF.9
label END_IF.9
// if ( key = 90 ) 
push local 0
push constant 90
eq
if-goto TRUE_IF.10
goto ELSE_IF.10
label TRUE_IF.10
// do square . decSize ( ) 
push this 0
call Square.decSize 1
pop temp 0
goto END_IF.10
label ELSE_IF.10
label END_IF.10
// if ( key = 88 ) 
push local 0
push constant 88
eq
if-goto TRUE_IF.11
goto ELSE_IF.11
label TRUE_IF.11
// do square . incSize ( ) 
push this 0
call Square.incSize 1
pop temp 0
goto END_IF.11
label ELSE_IF.11
label END_IF.11
// if ( key = 131 ) 
push local 0
push constant 131
eq
if-goto TRUE_IF.12
goto ELSE_IF.12
label TRUE_IF.12
// let direction = 1 
push constant 1
pop this 1
goto END_IF.12
label ELSE_IF.12
label END_IF.12
// if ( key = 133 ) 
push local 0
push constant 133
eq
if-goto TRUE_IF.13
goto ELSE_IF.13
label TRUE_IF.13
// let direction = 2 
push constant 2
pop this 1
goto END_IF.13
label ELSE_IF.13
label END_IF.13
// if ( key = 130 ) 
push local 0
push constant 130
eq
if-goto TRUE_IF.14
goto ELSE_IF.14
label TRUE_IF.14
// let direction = 3 
push constant 3
pop this 1
goto END_IF.14
label ELSE_IF.14
label END_IF.14
// if ( key = 132 ) 
push local 0
push constant 132
eq
if-goto TRUE_IF.15
goto ELSE_IF.15
label TRUE_IF.15
// let direction = 4 
push constant 4
pop this 1
goto END_IF.15
label ELSE_IF.15
label END_IF.15
// while ( ~ ( key = 0 ) ) 
label WHILE.16
push pointer 0
push local 0
push constant 0
eq
not
not
if-goto END_WHILE.16
// let key = Keyboard . keyPressed ( ) 
call Keyboard.keyPressed 0
pop local 0
// do moveSquare ( ) 
push pointer 0
call SquareGame.moveSquare 1
pop temp 0
goto WHILE.16
label END_WHILE.16
goto WHILE.7
label END_WHILE.7
// return 
push constant 0
return
