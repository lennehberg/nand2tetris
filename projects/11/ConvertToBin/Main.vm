function Main.main 1
// do Main . fillMemory ( 8001 , 16 , - 1 ) 
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
// let value = Memory . peek ( 8000 ) 
push constant 8000
call Memory.peek 1
pop local 0
// do Main . convert ( value ) 
push local 0
call Main.convert 1
// return 
return
function Main.convert 3
// let loop = true 
push constant 1
neg
pop local 2
// while ( loop ) 
label WHILE.1
push local 2
not
if-goto END_WHILE.1
// let position = position + 1 
push local 1
push constant 1
add
pop local 1
// let mask = Main . nextMask ( mask ) 
push local 0
call Main.nextMask 1
pop local 0
// if ( ~ ( position > 16 ) ) 
push local 1
push constant 16
gt
not
not
if-goto ELSE_IF.2
// if ( ~ ( ( value & mask ) = 0 ) ) 
push argument 0
push local 0
and
push constant 0
eq
not
not
if-goto ELSE_IF.3
// do Memory . poke ( 8000 + position , 1 ) 
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
goto END_IF.3
label ELSE_IF.3
// else 
// do Memory . poke ( 8000 + position , 0 ) 
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
label END_IF.3
goto END_IF.2
label ELSE_IF.2
// else 
// let loop = false 
push constant 0
pop local 2
label END_IF.2
goto WHILE.1
label END_WHILE.1
// return 
return
function Main.nextMask 0
// if ( mask = 0 ) 
push argument 0
push constant 0
eq
not
if-goto ELSE_IF.5
// return 1 
push constant 1
return
goto END_IF.5
label ELSE_IF.5
// else 
// return mask * 2 
push argument 0
push constant 2
call Math.multiply 2
return
label END_IF.5
function Main.fillMemory 0
// while ( length > 0 ) 
label WHILE.8
push argument 1
push constant 0
gt
not
if-goto END_WHILE.8
// do Memory . poke ( startAddress , value ) 
push argument 0
push argument 2
call Memory.poke 2
// let length = length - 1 
push argument 1
push constant 1
sub
pop argument 1
// let startAddress = startAddress + 1 
push argument 0
push constant 1
add
pop argument 0
goto WHILE.8
label END_WHILE.8
// return 
return
