// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
    And(a=instruction[3], b=instruction[15], out=writeM);


    // A register logic
    And(a=instruction[15], b=instruction[5], out=selA);
    Mux16(a=instruction, b=ALUout, sel=selA, out=regA);
    // if a-instruction == 1 or intruction dest-bit == 1
    // load the out of mux into a
    Not(in=instruction[15], out=nop);
    Or(a=nop, b=instruction[5], out=loadA);
    ARegister(in=regA, load=loadA, out=outA, out[0..14]=addressM);

    // ALU a input Mux
    Mux16(a=outA, b=inM, sel=instruction[12], out=ALUin);
    // ALU
    And(a=instruction[14],b=instruction[13],out=w1);
    Or(a=w1 ,b=nop, out=in8);
    Mux(a=true,b=instruction[13],sel=instruction[15],out=in7);
    ExtendAlu(x=outD, y=ALUin, instruction[8]=in8, instruction[7]=in7,
             		       instruction[6]=false, instruction[0..5]=instruction[6..11],
                         out=outM, out=ALUout, zr=zr, ng=ng);


    // D register logic
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);


    // Program Counter
    // if instruction-c and g(jump,ng,zr)==1) load A
    // else increment
    And(a=instruction[1], b=zr, out=je);
    And(a=instruction[2], b=ng, out=jl);
    Not(in=ng, out=nong);
    Not(in=zr, out=nozr);
    And(a=nong, b=nozr, out=pos);
    And(a=instruction[0], b=pos, out=jg);
    Or(a=je, b=jl, out=jle);
    Or(a=je, b=jg, out=jge);
    Or(a=jle, b=jge, out=jump);
    And(a=jump, b=instruction[15], out=loadPC);
    Not(in=loadPC, out=nloadPC);
    PC(in=outA, load=loadPC, inc=nloadPC, reset=reset, out[0..14]=pc);

}
