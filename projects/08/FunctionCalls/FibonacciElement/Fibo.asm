@SP
M=256
// call Sys.init
@0
D=A
@R14
M=D
@SP
D=M-1
@R15
M=D
@Sys.init.0
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@LCL
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@ARG
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THIS
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THAT
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@R14
D=M
@R15
A=M
D=A-D
@ARG
M=D
@SP
D=M
@Main$Sys.init
0;JMP
(Sys.init.0)
// functionMain.fibonacci
(Main.fibonacci)
// push  argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// push  constant 2
@2
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// lt
@SP
A=M-1
D=M
A=A-1
D=M-D
@SET_SP_TRUE.0
D;JLT
@SET_SP_FALSE.0
0;JMP
(SET_SP_TRUE.0)
@1
D=A
@SP
M=M-D
M=M-1
D=-1
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@END_SP_SET_BOOL.0
0;JMP
(SET_SP_FALSE.0)
@1
D=A
@SP
M=M-D
M=M-1
D=0
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
(END_SP_SET_BOOL.0)
// if-goto IF_TRUE
@14
D=A
@R13
M=D
@SP
A=M-1
D=M
@1
D=A
@SP
M=M-D
@R13
A=M
M=D
D=M
@Main$IF_TRUE
D;JNE
// goto IF_FALSE
@Main$IF_FALSE
0;JMP
// label IF_TRUE
(Main$IF_TRUE)
// push  argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// return
@LCL
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
M=D
D=A+1
@SP
M=D
@R14
A=M-1
D=M
@THAT
M=D
@2
D=A
@R14
A=M-D
D=M
@THIS
M=D
@3
D=A
@R14
A=M-D
D=M
@ARG
M=D
@4
D=A
@R14
A=M-D
D=M
@LCL
M=D
@5
D=A
@R14
A=M-D
A=M
0;JMP
// label IF_FALSE
(Main$IF_FALSE)
// push  argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// push  constant 2
@2
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@1
D=A
@SP
M=M-D
// call Main.fibonacci
@1
D=A
@R14
M=D
@SP
D=M-1
@R15
M=D
@Main.fibonacci.1
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@LCL
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@ARG
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THIS
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THAT
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@R14
D=M
@R15
A=M
D=A-D
@ARG
M=D
@SP
D=M
@Main$Main.fibonacci
0;JMP
(Main.fibonacci.1)
// push  argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// push  constant 1
@1
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@1
D=A
@SP
M=M-D
// call Main.fibonacci
@1
D=A
@R14
M=D
@SP
D=M-1
@R15
M=D
@Main.fibonacci.2
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@LCL
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@ARG
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THIS
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THAT
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@R14
D=M
@R15
A=M
D=A-D
@ARG
M=D
@SP
D=M
@Main$Main.fibonacci
0;JMP
(Main.fibonacci.2)
// add
@SP
A=M-1
D=M
A=A-1
M=M+D
@1
D=A
@SP
M=M-D
// return
@LCL
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
M=D
D=A+1
@SP
M=D
@R14
A=M-1
D=M
@THAT
M=D
@2
D=A
@R14
A=M-D
D=M
@THIS
M=D
@3
D=A
@R14
A=M-D
D=M
@ARG
M=D
@4
D=A
@R14
A=M-D
D=M
@LCL
M=D
@5
D=A
@R14
A=M-D
A=M
0;JMP
@SP
M=256
// call Sys.init
@0
D=A
@R14
M=D
@SP
D=M-1
@R15
M=D
@Sys.init.0
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@LCL
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@ARG
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THIS
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THAT
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@R14
D=M
@R15
A=M
D=A-D
@ARG
M=D
@SP
D=M
@Sys$Sys.init
0;JMP
(Sys.init.0)
// functionSys.init
(Sys.init)
// push  constant 4
@4
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
// call Main.fibonacci
@1
D=A
@R14
M=D
@SP
D=M-1
@R15
M=D
@Main.fibonacci.1
D=A
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@LCL
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@ARG
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THIS
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@THAT
D=M
@SP
A=M
M=D
@1
D=A
@SP
M=M+D
@R14
D=M
@R15
A=M
D=A-D
@ARG
M=D
@SP
D=M
@Sys$Main.fibonacci
0;JMP
(Main.fibonacci.1)
// label WHILE
(Sys$WHILE)
// goto WHILE
@Sys$WHILE
0;JMP
